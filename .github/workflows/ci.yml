name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 18
          - 20
          - 22
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint commit messages
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }}

      - name: Lint and auto-fix code
        id: lint
        run: |
          # First try to apply fixes
          yarn format || true
          yarn lint:fix || true
          
          # Check if there are any changes
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Run lint check to see if issues remain
          yarn lint

      - name: Commit and push lint fixes
        if: steps.lint.outputs.has_changes == 'true' && github.event_name == 'push' && matrix.node-version == '20'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "style: apply automatic lint fixes [skip ci]"
          git push

      - name: Commit lint fixes to PR
        if: steps.lint.outputs.has_changes == 'true' && github.event_name == 'pull_request' && matrix.node-version == '20'
        uses: EndBug/add-and-commit@v9
        with:
          author_name: github-actions[bot]
          author_email: 41898282+github-actions[bot]@users.noreply.github.com
          message: 'style: apply automatic lint fixes'
          push: true

      - name: Type check
        run: npx tsc --noEmit

      - name: Run tests with coverage
        run: |
          mkdir -p coverage
          yarn test:ci --reporter=json --reporter=junit --reporter=default --outputFile.json=coverage/test-results.json --outputFile.junit=coverage/junit.xml

      - name: Generate coverage summary
        if: always() && matrix.node-version == '20'
        run: |
          # Extract coverage summary
          if [ -f coverage/coverage-summary.json ]; then
            echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Coverage | Details |" >> $GITHUB_STEP_SUMMARY
            echo "|------|----------|---------|" >> $GITHUB_STEP_SUMMARY
            
            # Parse coverage-summary.json and create markdown table
            node -e "
              const summary = require('./coverage/coverage-summary.json');
              const total = summary.total;
              const formatPct = (pct) => \`\${pct.toFixed(2)}%\`;
              
              console.log(\`| Statements | \${formatPct(total.statements.pct)} | \${total.statements.covered}/\${total.statements.total} |\`);
              console.log(\`| Branches | \${formatPct(total.branches.pct)} | \${total.branches.covered}/\${total.branches.total} |\`);
              console.log(\`| Functions | \${formatPct(total.functions.pct)} | \${total.functions.covered}/\${total.functions.total} |\`);
              console.log(\`| Lines | \${formatPct(total.lines.pct)} | \${total.lines.covered}/\${total.lines.total} |\`);
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always() && matrix.node-version == '20'
        with:
          name: Test Results (Node ${{ matrix.node-version }})
          path: coverage/junit.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/test-results.json
            coverage/junit.xml
            coverage/lcov.info
            coverage/coverage-*.json
          retention-days: 7

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request' && matrix.node-version == '20'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (!fs.existsSync('coverage/coverage-summary.json')) return;
            
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const formatPct = (pct) => {
              const rounded = pct.toFixed(2);
              if (pct >= 80) return `🟢 ${rounded}%`;
              if (pct >= 60) return `🟡 ${rounded}%`;
              return `🔴 ${rounded}%`;
            };
            
            const body = `## 📊 Coverage Report
            
            | Type | Coverage | Details |
            |------|----------|---------|
            | Statements | ${formatPct(total.statements.pct)} | ${total.statements.covered}/${total.statements.total} |
            | Branches | ${formatPct(total.branches.pct)} | ${total.branches.covered}/${total.branches.total} |
            | Functions | ${formatPct(total.functions.pct)} | ${total.functions.covered}/${total.functions.total} |
            | Lines | ${formatPct(total.lines.pct)} | ${total.lines.covered}/${total.lines.total} |
            
            <details>
            <summary>Coverage threshold: 80% for all metrics</summary>
            
            Coverage reports are generated by Vitest using v8.
            </details>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📊 Coverage Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - name: Build
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-node-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  test-summary:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: all-results

      - name: Aggregate test results
        run: |
          echo "## 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count total tests across all Node versions
          if ls all-results/test-results.json 2>/dev/null; then
            for file in all-results/test-results.json; do
              if [ -f "$file" ]; then
                node -e "
                  const data = require('./$file');
                  const stats = data.testResults.reduce((acc, suite) => {
                    acc.numTotalTests += suite.numPassingTests + suite.numFailingTests;
                    acc.numPassedTests += suite.numPassingTests;
                    acc.numFailedTests += suite.numFailingTests;
                    acc.duration += suite.duration || 0;
                    return acc;
                  }, { numTotalTests: 0, numPassedTests: 0, numFailedTests: 0, duration: 0 });
                  
                  console.log('| Node Version | Total | Passed | Failed | Duration |');
                  console.log('|--------------|-------|--------|--------|----------|');
                  console.log(\`| All | \${stats.numTotalTests} | ✅ \${stats.numPassedTests} | ❌ \${stats.numFailedTests} | \${(stats.duration/1000).toFixed(2)}s |\`);
                " >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi